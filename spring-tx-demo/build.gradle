plugins {
	id 'org.springframework.boot' version '2.2.0.BUILD-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
	id 'jacoco'
}

group = 'com.prady.sample'
version = '1.0.0'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.mapstruct:mapstruct:1.3.0.Final'
	implementation 'org.mapstruct:mapstruct-jdk8:1.3.0.Final'
	implementation 'org.apache.commons:commons-lang3:3.9'
	
	implementation 'com.h2database:h2'
	implementation 'mysql:mysql-connector-java'
	
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.0.Final'
	
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
}

test {
	systemProperty 'spring.profiles.active', System.getProperty("spring.profiles.active")
    useJUnitPlatform()
    jacoco {
    	excludes = [
    		"**/com/prady/sample/tx/SpringTxDemoApplication.*"
    	]
    }
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.95
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude:'com/prady/sample/tx/SpringTxDemoApplication.*')
        }))
    }
}

jacocoTestCoverageVerification.dependsOn jacocoTestReport
check.dependsOn jacocoTestCoverageVerification
